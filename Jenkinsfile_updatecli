def cronExpr = env.BRANCH_IS_PRIMARY ? 'H/30 * * * *' : ''

properties([
    buildDiscarder(logRotator(numToKeepStr: '10')),
    disableConcurrentBuilds()
])
if (cronExpr) {
    properties([pipelineTriggers([cron(cronExpr)])])
}

node('jnlp-linux-arm64') {
    timeout(time: 30, unit: 'MINUTES') {
        withCredentials([
            azureServicePrincipal('updatecli-azure-serviceprincipal'), // needed for Azure login
            usernamePassword(
                credentialsId: 'github-app-updatecli-on-jenkins-infra', // needed for updatecli
                usernameVariable: 'USERNAME_VALUE',
                passwordVariable: 'UPDATECLI_GITHUB_TOKEN'
            )
        ]) {
            // Preliminary Azure login steps
            sh 'az login --service-principal -u "$AZURE_CLIENT_ID" -p "$AZURE_CLIENT_SECRET" -t "$AZURE_TENANT_ID"'
            sh 'az account set -s "$AZURE_SUBSCRIPTION_ID"'

            // Branch conditional: if not primary, run diff; otherwise, run apply
            if (!env.BRANCH_IS_PRIMARY) {
                stage('Check Configuration Update') {
                    script {
                        updatecli(
                                action: 'diff',
                                runInCurrentAgent: true
                            )
                    }
                }
            } else {
                stage('Apply Configuration Update') {
                    script {
                        updatecli(
                                action: 'apply',
                                runInCurrentAgent: true
                            )
                    }
                }
            }
        }
    }
}
