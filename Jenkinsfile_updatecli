node('jnlp-linux-arm64') {
    def cronExpr = env.BRANCH_IS_PRIMARY ? 'H/30 * * * *' : ''

    // Set pipeline options
    properties([
        buildDiscarder(logRotator(numToKeepStr: '10')),
        timeout(time: 30, unit: 'MINUTES'),
        disableConcurrentBuilds()
    ])
    if (cronExpr) {
        properties([pipelineTriggers([cron(cronExpr)])])
    }

    // Set environment variable for Azure credentials (from Jenkins credentials)
    env.UPDATECLI_AZURE = credentials('updatecli-azure-serviceprincipal')

    // Use a single withCredentials block for all required credentials.
    withCredentials([
        string(credentialsId: 'packer-aws-access-key-id', variable: 'AWS_ACCESS_KEY_ID'),
        string(credentialsId: 'packer-aws-secret-access-key', variable: 'AWS_SECRET_ACCESS_KEY'),
        usernamePassword(
            credentialsId: 'github-app-updatecli-on-jenkins-infra', // needed for updatecli
            usernameVariable: 'USERNAME_VALUE',
            passwordVariable: 'UPDATECLI_GITHUB_TOKEN'
        )
    ]) {
        sh 'az login --service-principal -u "$UPDATECLI_AZURE_CLIENT_ID" -p "$UPDATECLI_AZURE_CLIENT_SECRET" -t "$UPDATECLI_AZURE_TENANT_ID"'
        sh 'az account set -s "$UPDATECLI_AZURE_SUBSCRIPTION_ID"'

        // Branch conditional: run diff on non-primary; apply on primary.
        if (!env.BRANCH_IS_PRIMARY) {
            stage('Check Configuration Update') {
                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                    script {
                        updatecli(action: 'diff')
                    }
                }
            }
        } else {
            stage('Apply Configuration Update') {
                script {
                    updatecli(action: 'apply')
                }
            }
        }
    }
}
